V8 JavaScript engine + event-driven + non-blocking IO = node.js
JavaScript는 언어, Web Browser에서 사용 가능, Web server에서 사용하면 node.js

서버에서 사용되는 언어(Python, Ruby, php, Java)
인터넷의 동작: 
서버 컴퓨터의 동작:
컴퓨터에 0~65536번의 port가 있다.
(http는 기본적으로)80번 port에 웹 서버를 연결 (listening 하게 한다)

모듈: 부품 (ex, http.createServer)
var circle = require('./node.circle.js'); // node.circle.js 의 내용을 가져와서 cirle에 담는다.
node.circle.js 의 내용을  위 코드의 파일에서 사용할 수 있다.

app.get('/', function(req, res){
//사용자가 web server에 접속할 때 get과 host 방식으로 접속할 수 있다.
//get 함수의 인자인 function()함수는 req, res 인자를 갖는다.
//사용자가 root 로 들어왔을 때, get 함수가 function을 실행시킨다.
//매개변수 값으로 사용자의 요청 관련 req 객체, 응답에 대한 res 객체를 전달
 res.send('Hello home page');
 console.log('Welcome home.');
});

app.use(express.static('public')); // 정적인 파일이 위치할 디렉토리를 지정하는 기능

__filename 파일 경로, __dirname 폴더 경로
console.log() // 콘솔창에 표시
console.time(label), console.timeEnd(label) // 시간 측정
process.argv // 실행 매개변수
process.env // 컴퓨터 환경
process.version // Node.js 버젼 versions // 종속된 프로그램 버젼
process.arch // 프로세서 아키텍쳐 process.platform // 플랫폼
process.on('eventName', eventHandler(){console.log('실행');});
process.removeListener('eventName', eventHandler());

url.parse(urlString[, parseQueryString[, slashesDenoteHost]]) // url 입력하면 분해하여 객체로 만듬
crypto.createHash() // 해시 생성
var server = http.createServer(); // 웹서버 생성
server.listen(8080); // 8080 포트로 server를 실행
setInterval(function(){
	server.close(); // 서버를 종료한다.
}, 10000); // 10초 이후
